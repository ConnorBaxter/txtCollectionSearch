using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.IO;
using  AhoCorasick;

namespace Exploit.In
{
    public partial class MainForm : Form
    {
        public static bool endSearch = false;

        public string FolderLocation = null;
        public string SearchTerm = null;

        public static string timeTook = "0";

        Label lblLinesCount = new Label();

        int lineCount = 0;

        Form controlForm = new ControlForm();

        public MainForm()
        {
            InitializeComponent();
            createLabel();
        }

        public static void stopSearch()
        {
            endSearch = true;
        }

        public void createLabel()
        {
            Point p = new Point(153, 547);
            lblLinesCount.Location = p;
            lblLinesCount.Text = "0000";
            lblLinesCount.Enabled = true;
            Controls.Add(lblLinesCount);
        }

        public void updateLabel()
        {
            lblLinesCount.Text = lineCount.ToString();
        }

        private void btnFolderLoc_Click(object sender, EventArgs e)
        {
            openFileDialog1.ShowDialog();
        }

        public void log(string text)
        {
            txtLog.AppendText(" " + text);
            txtLog.AppendText("\r\n");          
        }

        public void output(string text)
        {
            txtOutput.AppendText(text);
            txtOutput.AppendText("\r\n");
        }
        public static void timerOutput(string time)
        {
            timeTook = time;
        }

        private void openFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            openFileDialog1.Title = "Select 1.txt";
            string filename = openFileDialog1.FileName;
            string safename = openFileDialog1.SafeFileName;
            int start = filename.Length - safename.Length;
            filename = filename.Remove(start, safename.Length);
            txtFolderLoc.Text = filename;
            FolderLocation = filename;
            log("FolderLocation set");
        }

        private void btnSrch_Click(object sender, EventArgs e)
        {
            if (chkAho.Checked)
            {
                aho();
            }
            else
            {
                mySearch();
            }
        }

        public void aho()
        {
            new Thread(() => new ControlForm().ShowDialog()).Start();

            var tr = new Trie();
            tr.Add(txtSearchTerm.Text);
            tr.Build();

            string[] strArray = tr.Find(File.ReadAllText(FolderLocation + "pass.txt")).ToArray();
            foreach (string s in strArray)
            {
                output(s);
            }
        }

        public void mySearch()
        {
            endSearch = false;

            DirectoryInfo DirInf = null;
            StreamReader StreamReader = StreamReader.Null;

            if (txtSearchTerm != null)
            {
                SearchTerm = txtSearchTerm.Text;
                log("SearchTerm set");
            }

            if (FolderLocation != null)
            {
                DirInf = new DirectoryInfo(FolderLocation);
                log("DirectoryInfo initialized");
            }

            List<FileInfo> Files = new List<FileInfo>();
            Files.AddRange(DirInf.GetFiles("*.txt"));
            if (Files.Count > 0)
            {
                log("Files populated\n");
            }
            else
            {
                log("No Files Found!");
            }

            txtLog.AppendText("Lines: ");

            string currentLine;
            int fileCount = 0;
            int count = 0;
            int startIndex = txtLog.TextLength;

            new Thread(() => new ControlForm().ShowDialog()).Start();

            foreach (FileInfo fInf in Files)
            {
                fileCount++;
                lblFiles.Text = fileCount.ToString();
                StreamReader = fInf.OpenText();
                while (!StreamReader.EndOfStream && !endSearch)
                {
                    count++;
                    currentLine = StreamReader.ReadLine();
                    if (currentLine.Contains(SearchTerm))
                    {
                        output(currentLine);
                        txtLog.Text = txtLog.Text.Remove(startIndex, txtLog.TextLength - startIndex);
                        log(count.ToString());
                    }
                    txtLog.Text = txtLog.Text.Remove(startIndex, txtLog.TextLength - startIndex);
                    log(count.ToString());
                    lineCount = count;
                    updateLabel();
                }
            }
            StreamReader.Close();

            output("Runtime: " + timeTook);
            controlForm.Close();
        }

        private void btnSaveOutput_Click(object sender, EventArgs e)
        {
            saveFileDialog1.ShowDialog();
        }

        private void saveFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            string fileLoc = saveFileDialog1.FileName;
            StreamWriter strmWrite = new StreamWriter(fileLoc);
            strmWrite.WriteLineAsync(txtOutput.Text);
            strmWrite.Close();
            log("File Saved: " + fileLoc);
        }
    }
}
